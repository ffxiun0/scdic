#!/usr/bin/env ruby
# coding: utf-8

# Copyright 2019 ffxiun0
# https://opensource.org/licenses/MIT

def main()
  wslist = read_ws()

  write_ws_list(wslist)
  write_element_combination(wslist)
  write_ws_combination(wslist)
  write_nochain_ws_combination(wslist)
  write_loop_chains(wslist)
end

def read_ws()
  wslist = []

  STDIN.each_line {|line|
    wslist << WeaponSkill.parse(line)
  }

  return wslist
end

def write_dic_entry(kanas, word)
  kanas.each {|kana|
    printf("%s\t%s\t短縮よみ\n", kana, word)
  }
end

def write_ws_list(wslist)
  wslist.each {|ws|
    kanas = [ws.type_kana] + ws.kanas

    dlist = [ws.type]
    dlist << ws.kind if not ws.kind.empty?
    dlist << ws.jobs_s if not ws.jobs_s.empty?
    desc = dlist.join("/")

    word = sprintf("%s(%s)【%s】", ws.name, ws.elems_s, desc)

    write_dic_entry(kanas, word)
  }
end

def write_element_combination(wslist)
  wslist.each {|ws|
    ChainElement.all.each {|elem|
      if chain = ws.chain_from(elem) then
        kanas = make_ec_kanas(elem, ws, chain)
        word = make_ec_word(ws, chain)
        write_dic_entry(kanas, word)
      end
    }
  }
end

def make_ec_kanas(elem, ws, chain)
  result = []

  result << elem.kana + "＞" + ws.type_kana
  result << elem.kana + "＞" + ws.type_kana + "＞" + chain.chain.kana
  result += ws.kanas.map {|ws_kana| elem.kana + "＞" + ws_kana}

  return result
end

def make_ec_word(ws, chain)
  sprintf("(%s)＞%s(%s)＞[%s]%s",
          chain.first.name, ws.name, chain.second.name,
          chain.chain.name, chain.chain.last ? "<終>" : "")

end

def write_ws_combination(wslist)
  wslist.each {|ws1|
    wslist.each {|ws2|
      if chain = ws1.chain(ws2) then
        kanas = make_wsc_kanas(ws1, ws2, chain)
        word = make_wsc_word(ws1, ws2, chain)
        write_dic_entry(kanas, word)
      end
    }
  }
end

def make_wsc_kanas(ws1, ws2, chain)
  result = []

  ws1.kanas.each {|ws1_kana|
    ws2.kanas.each {|ws2_kana|
      result << ws1_kana + "＞" + ws2_kana
    }
  }
  ws1.kanas.each {|ws1_kana|
      result << ws1_kana + "＞" + ws2.type_kana
      result << ws1_kana + "＞" + ws2.type_kana + "＞" + chain.chain.kana
  }
  ws2.kanas.each {|ws2_kana|
      result << ws1.type_kana + "＞" + ws2_kana
      result << ws1.type_kana + "＞" + ws2_kana + "＞" + chain.chain.kana
  }
  result << ws1.type_kana + "＞" + ws2.type_kana
  result << ws1.type_kana + "＞" + ws2.type_kana + "＞" + chain.chain.kana

  return result
end

def make_wsc_word(ws1, ws2, chain)
  sprintf("%s(%s)＞%s(%s)＞[%s]%s",
          ws1.name, chain.first.name,
          ws2.name, chain.second.name,
          chain.chain.name, chain.chain.last ? "<終>" : "")
end

def write_nochain_ws_combination(wslist)
  wslist.each {|ws1|
    wslist.each {|ws2|
      if !ws1.chain(ws2) && !ws2.chain(ws1) then
        kanas = make_no_wsc_kanas(ws1, ws2)
        word = make_no_wsc_word(ws1, ws2)
        write_dic_entry(kanas, word)
      end
    }
  }
end

def make_no_wsc_kanas(ws1, ws2)
  result = []

  ws1.kanas.each {|ws1_kana|
    ws2.kanas.each {|ws2_kana|
      result << ws1_kana + "｜" + ws2_kana
    }
  }
  ws1.kanas.each {|ws1_kana|
      result << ws1_kana + "｜" + ws2.type_kana
  }
  ws2.kanas.each {|ws2_kana|
      result << ws1.type_kana + "｜" + ws2_kana
  }
  result << ws1.type_kana + "｜" + ws2.type_kana

  return result
end

def make_no_wsc_word(ws1, ws2)
  selfchain1 = ws1.chain(ws1) ? "<自己連携有>" : ""
  selfchain2 = ws2.chain(ws2) ? "<自己連携有>" : ""

  return sprintf("【連携しない】%s(%s)%s｜%s(%s)%s",
                 ws1.name, ws1.elems_s, selfchain1,
                 ws2.name, ws2.elems_s, selfchain2)
end

def write_loop_chains(wslist)
  wslist.each {|ws|
    if chain1 = ws.chain(ws) then
      if chain2 = ws.chain_from(chain1.chain) then
        if chain1.first.name == chain2.chain.name then
          kanas = ["むげんれんけい"]
          word = sprintf("【無限連携】%s(%s⇔%s)", ws.name,
                         chain1.first.name, chain1.chain.name)
          write_dic_entry(kanas, word)
        end
      end
    end
  }
end

class WeaponSkill
  def initialize(type, kanas, name, elems, kind, jobs)
    (@type, @kanas, @name, @elems, @kind, @jobs) =
      type, kanas, name, elems, kind, jobs

    @type_kana = @@type_kana[@type]
    @name += "(A)" if @kind == "イオニック"
  end

  def self.parse(line)
    (type, kanas, name, elems, kind, jobs) =
      line.split(/\t/).map {|s| s.strip}

    kanas = kanas.split(/\//)
    elems = ChainElement.parse(elems)
    kind = kind ? kind : ""
    jobs = jobs ? jobs.split(/\//) : []

    return WeaponSkill.new(type, kanas, name, elems, kind, jobs)
  end

  def type() @type end
  def type_kana() @type_kana end
  def kanas() @kanas end
  def name() @name end
  def elems() @elems end
  def elems_s() @elems.empty? ? "なし" : @elems.join("/") end
  def kind() @kind end
  def jobs() @jobs end
  def jobs_s() @jobs.join("") end
  def to_s() @name end

  def chain(ws)
    @elems.each {|elem1|
      ws.elems.each{|elem2|
        if chain = elem1.chain(elem2) then
          return ChainResult.new(elem1, elem2, chain)
        end
      }
    }
    return nil
  end

  def chain_from(elem)
    @elems.each{|elem2|
      if chain = elem.chain(elem2) then
        return ChainResult.new(elem, elem2, chain)
      end
    }
    return nil
  end

  @@type_kana = {
    "格闘" => "かくとう",
    "短剣" => "たんけん",
    "片手剣" => "かたてけん",
    "両手剣" => "りょうてけん",
    "片手斧" => "かたておの",
    "両手斧" => "りょうておの",
    "両手槍" => "りょうてやり",
    "両手鎌" => "りょうてかま",
    "片手刀" => "かたてとう",
    "両手刀" => "りょうてとう",
    "片手棍" => "かたてこん",
    "両手棍" => "りょうてこん",
    "弓術" => "きゅうじゅつ",
    "射撃" => "しゃげき",
  }
end

class ChainElement
  def initialize(name, last = false)
    @name = name
    @kana = @@kana[@name]
    @last = last
  end

  def name() @name end
  def kana() @kana end
  def last() @last end
  def to_s() @name end

  def chain(elem)
    return nil if @last
    return nil if not map = @@map[@name]
    return nil if not chain = map[elem.name]
    return ChainElement.new(chain[:element], chain[:last])
  end

  def self.parse(text)
    return [] if text.nil?
    return text.split(/\//).map {|s| ChainElement.new(s.strip)}
  end

  def self.all() @@all end

  @@map = {
    "貫通" => {
      "収縮" => { element: "収縮", last: false },
      "切断" => { element: "湾曲", last: false },
      "振動" => { element: "振動", last: false }
    },
    "収縮" => {
      "貫通" => { element: "貫通", last: false },
      "炸裂" => { element: "炸裂", last: false }
    },
    "溶解" => {
      "切断" => { element: "切断", last: false },
      "衝撃" => { element: "核熱", last: false }
    },
    "切断" => {
      "溶解" => { element: "溶解", last: false },
      "振動" => { element: "振動", last: false },
      "炸裂" => { element: "炸裂", last: false }
    },
    "振動" => {
      "硬化" => { element: "硬化", last: false },
      "衝撃" => { element: "衝撃", last: false }
    },
    "炸裂" => {
      "収縮" => { element: "重力", last: false },
      "切断" => { element: "切断", last: false }
    },
    "硬化" => {
      "収縮" => { element: "収縮", last: false },
      "振動" => { element: "分解", last: false },
      "衝撃" => { element: "衝撃", last: false }
    },
    "衝撃" => {
      "溶解" => { element: "溶解", last: false },
      "炸裂" => { element: "炸裂", last: false }
    },
    "重力" => {
      "湾曲" => { element: "闇", last: false },
      "分解" => { element: "分解", last: false }
    },
    "湾曲" => {
      "重力" => { element: "闇", last: false },
      "核熱" => { element: "核熱", last: false }
    },
    "核熱" => {
      "重力" => { element: "重力", last: false },
      "分解" => { element: "光", last: false }
    },
    "分解" => {
      "湾曲" => { element: "湾曲", last: false },
      "核熱" => { element: "光", last: false }
    },
    "光" => {
      "光" => { element: "光", last: true },
    },
    "闇" => {
      "闇" => { element: "闇", last: true },
    },
  }

  @@kana = {
    "貫通" => "かんつう",
    "収縮" => "しゅうしゅく",
    "溶解" => "ようかい",
    "切断" => "せつだん",
    "振動" => "しんどう",
    "炸裂" => "さくれつ",
    "硬化" => "こうか",
    "衝撃" => "しょうげき",
    "重力" => "じゅうりょく",
    "湾曲" => "わんきょく",
    "核熱" => "かくねつ",
    "分解" => "ぶんかい",
    "光" => "ひかり",
    "闇" => "やみ",
  }

  @@all = @@map.keys.map {|s| ChainElement.new(s)}
end

class ChainResult
  def initialize(first, second, chain)
    @first = first
    @second = second
    @chain = chain
  end

  def first() @first end
  def second() @second end
  def chain() @chain end
end

main()
